#!/sbin/runscript
# Distributed under the terms of the GNU General Public License v2
# Copright 2007-2020 Man Technology inc
# Man Technology inc
# Original script adapted to gentoo environment


# I so do not see why gentoo would need it's own init script.
# But if you think it does, well, you get to fix it.
# See what we do in the generic one.
echo "FIXME, contributers welcome. This is broken for 8.4" >&2
exit 255

depend() {
	use logger
	need net
	before heartbeat
	after sshd
}

opts="${opts} reload"

DEFAULTFILE="/etc/conf.d/bsr"
BSRADM="/sbin/bsradm"
PROC_BSR="/proc/bsr"
MODPROBE="/sbin/modprobe"
RMMOD="/sbin/rmmod"
UDEV_TIMEOUT=10
ADD_MOD_PARAM=""

if [ -f $DEFAULTFILE ]; then
  . $DEFAULTFILE
fi

# Just in case bsradm want to display any errors in the configuration
# file, or we need to ask the user about registering this installation
# at http://usage.bsr.org, we call bsradm here without any IO
# redirection.
$BSRADM sh-nop

function assure_module_is_loaded
{
    [ -e "$PROC_BSR" ] && return
    ebegin "Loading bsr module"
    ret=0

    $MODPROBE -s bsr `$BSRADM sh-mod-parms` $ADD_MOD_PARAM || ret=20
    eend $ret
    return $ret
}

function adjust_with_progress
{
    IFS_O=$IFS
    NEWLINE='
'
    IFS=$NEWLINE
    local D=0
    local S=0
    local N=0

    einfon "Setting bsr parameters "
    COMMANDS=`$BSRADM -d adjust all` || { 
    	eend 20 "Error executing bsradm"
	return 20 
    }
    echo -n "[ "

    for CMD in $COMMANDS; do
        if echo $CMD | grep -q disk; then echo -n "d$D "; D=$(( D+1 ));
        elif echo $CMD | grep -q syncer; then echo -n "s$S "; S=$(( S+1 ));
        elif echo $CMD | grep -q net; then echo -n "n$N "; N=$(( N+1 ));
        else echo echo -n ".. ";
        fi
        IFS=$IFS_O
        $CMD || {
	    echo 
            eend 20 "cmd $CMD failed!"
	    return 20
        }
        IFS=$NEWLINE
    done
    echo "]"
    eend 0

    IFS=$IFS_O
}

start() {
	einfo "Starting BSR resources:"
	eindent
	assure_module_is_loaded || return $?
	adjust_with_progress || return $?

        # make sure udev has time to create the device files
	ebegin "Waiting for udev device creation ..."
        for RESOURCE in `$BSRADM sh-resources`; do
            for DEVICE in `$BSRADM sh-dev $RESOURCE`; do
                UDEV_TIMEOUT_LOCAL=$UDEV_TIMEOUT
                while [ ! -e $DEVICE ] && [ $UDEV_TIMEOUT_LOCAL -gt 0 ] ; do
                    sleep 1
                UDEV_TIMEOUT_LOCAL=$(( $UDEV_TIMEOUT_LOCAL-1 ))
                done
            done
        done
	eend 0

	einfon "Waiting for connection "
	$BSRADM wait-con-int
	echo 
	ret=$?
	eend $ret
	return $ret
}

stop() {

	ebegin "Stopping all BSR resources"

        # Check for mounted bsr devices
        if ! grep -q '^/dev/bsr' /proc/mounts &>/dev/null; then
                if [ -e ${PROC_BSR} ]; then
                        ${BSRADM} down all
                        ${RMMOD} bsr
                fi
		ret=$?
                eend $ret
		return $ret
        else
                einfo "bsr devices mounted, please umount them before trying to stop bsr!"
                eend 1
		return 1
        fi
}

status() {
	# NEEDS to be heartbeat friendly...
	# so: put some "OK" in the output.

        if [ -e $PROC_BSR ]; then
	    ret=0
            ebegin "bsr driver loaded OK; device status:"
	    eend $ret
            cat $PROC_BSR
        else
	    ebegin "bsr not loaded"
	    ret=3
	    eend $ret
        fi
	return $ret
}

reload() {
	ebegin "Reloading BSR"
	${BSRADM} adjust all
	ret=$?
	eend $ret
	return $ret
}
