obj-m := bsr.o # drbd_transport_tcp.o

clean-files := compat.h .config.timestamp

LINUXINCLUDE := -I$(src) -I$(src)/../bsr-headers $(LINUXINCLUDE)

# Files in the standard include directories take precendence over files
# in the bsr-kernel-compat directory.
#
# Add -I$(src) to EXTRA_CFLAGS again: some (rhel5, maybe other) kbuild does not
# yet use LINUXINCLUDE like we expect it to ;( fortunately it does not contain
# in-tree bsr either yet, so precedence of include files is not important.
#
# override: we absolutely need this, even if EXTRA_CFLAGS originates from make
# command line or environment
override EXTRA_CFLAGS += -I$(src) -I$(src)/bsr-kernel-compat

# The augmented rbtree helper functions are not exported at least until kernel
# version 2.6.38-rc2.
ifeq ($(shell grep -e '\<rb_augment_insert\>' \
		   -e '\<rb_augment_erase_begin\>' \
		   -e '\<rb_augment_erase_end\>' \
		   $(objtree)/Module.symvers | wc -l),3)
override EXTRA_CFLAGS += -DAUGMENTED_RBTREE_SYMBOLS_EXPORTED
endif

ifeq ($(shell grep -e '\<idr_get_next\>' \
		   $(objtree)/Module.symvers | wc -l),1)
override EXTRA_CFLAGS += -DIDR_GET_NEXT_EXPORTED
else
compat_objs += bsr-kernel-compat/idr.o
endif

ifeq ($(shell grep -e '\<blkdev_issue_zeroout\>' \
		   $(objtree)/Module.symvers | wc -l),1)
override EXTRA_CFLAGS += -DBLKDEV_ISSUE_ZEROOUT_EXPORTED
else
compat_objs += bsr-kernel-compat/blkdev_issue_zeroout.o
endif

#bsr-$(CONFIG_DEBUG_FS) += bsr_debugfs.o
#bsr-y += bsr_buildtag.o bsr_bitmap.o bsr_proc.o
#bsr-y += bsr_sender.o bsr_receiver.o bsr_req.o bsr_actlog.o
#bsr-y += lru_cache.o bsr_main.o bsr_strings.o bsr_nl.o
#bsr-y += bsr_interval.o bsr_state.o $(compat_objs)
#bsr-y += bsr_nla.o bsr_transport.o
bsr-y += ../bsr-platform/linux/bsrhk/bsrhk_init.o

ifdef ENABLE_KREF_DEBUGGING_HERE
      override EXTRA_CFLAGS += -DCONFIG_KREF_DEBUG
      bsr-y += kref_debug.o bsr_kref_debug.o
endif

$(patsubst %,$(obj)/%,$(bsr-y)): $(obj)/compat.h
$(patsubst %,$(obj)/%,bsr_transport_tcp.o): $(obj)/compat.h

obj-$(CONFIG_BLK_DEV_BSR)     += bsr.o

# ======================================================================

# Are we in stage 2 of the build (modpost)?

# Apparently GNU Make 4.0 strips leading ./ from MAKEFILE_LIST. Yay.

KBUILD_STAGE ?= $(if $(filter      scripts/Makefile.modpost \
			$(srctree)/scripts/Makefile.modpost,\
			$(MAKEFILE_LIST)),modpost)

ifneq ($(shell date -r $(objtree)/.config),$(shell date -r $(obj)/.config.timestamp 2> /dev/null))
COMPAT_FORCE := FORCE
endif

ifneq ($(KBUILD_STAGE),modpost)
$(obj)/compat.h: $(wildcard $(src)/bsr-kernel-compat/tests/*.c) $(COMPAT_FORCE)
	$(call filechk,compat.h)
	$(Q)touch $@
	$(Q)touch -r $(objtree)/.config $(obj)/.config.timestamp
else
# remember KERNELRELEASE for install target
# .kernelversion can be included in Makefile as well as
# sourced from shell
$(shell printf "%s\n"				\
	"VERSION=$(VERSION)"			\
	"PATCHLEVEL=$(PATCHLEVEL)"		\
	"SUBLEVEL=$(SUBLEVEL)"			\
	"EXTRAVERSION=$(EXTRAVERSION)"		\
	"LOCALVERSION=$(LOCALVERSION)"		\
	"KERNELRELEASE=$(KERNELRELEASE)"	\
	"KERNELVERSION=$(KERNELVERSION)"	\
	> $(src)/.bsr_kernelrelease.new	\
)
endif

filechk_compat.h = \
	for cfg in $(sort $(filter-out FORCE,$^)); do \
	    var=`echo $$cfg | \
		 sed -e "s,.*/,COMPAT_," -e "s,\.c,," | \
		 tr -- -a-z _A-Z | \
		 tr -dc A-Z0-9_`; \
	    if $(CC) $(c_flags) $(COMPAT_CFLAGS) -c -o $(obj)/dummy.o $$cfg \
		    > /dev/null $(if $(quiet),2>&1); then \
		echo "\#define $$var"; \
		rm -f $(obj)/dummy.{o,gcda,gcno}; \
	    else \
		echo "/* \#undef $$var */"; \
	    fi; \
	done

# for some reason some of the commands below only work correctly in bash,
# and not in e.g. dash. I'm too lazy to fix it to be compatible.
SHELL=/bin/bash

$(obj)/bsr_buildtag.c: $(filter-out bsr_buildtag.o,$(bsr-y))
	@$(kecho) '  GEN     $@ $(echo-why)'
	@set -e; exec > $@.new;							\
	echo -e "/* automatically generated. DO NOT EDIT. */";			\
	echo -e "#include <linux/bsr.h>";					\
	echo -e "#include <linux/bsr_config.h>";				\
	echo -e "const char *bsr_buildtag(void)\n{";				\
	if test -e $(src)/../.git &&						\
	   GITHEAD=$$(cd $(src) && git rev-parse HEAD); then			\
		GITDIFF=$$(cd $(src)/.. && git diff --name-only HEAD |		\
			tr -s '\t\n' '  ' |					\
			sed -e 's/^/ /;s/ *$$//');				\
		echo -e "\treturn \"GIT-hash: $$GITHEAD$$GITDIFF\"";		\
	elif test -e $(src)/.bsr_git_revision ; then				\
		echo -e "\treturn \"$$(cat $(src)/.bsr_git_revision)\"";	\
	elif test -e $@ ; then							\
		grep return $@ ;						\
	else									\
		echo >&2 "Your BSR source tree is broken. Unpack again.";      \
		exit 1;								\
	fi ;									\
	echo -e "\t\t\" build by $$USER@$$HOSTNAME, `date "+%F %T"`\";\n}";	\
	mv --force $@.new $@
